I"<blockquote>
  <p>GeekWeek 2022 -  <a href="https://www.geeksforgeeks.org/difference-between-typescript-and-javascript/" target="_blank" rel="noopener noreferrer" style="color : green">Difference between TypeScript and JavaScript</a>를 번역한 글입니다.</p>
</blockquote>

<h2 id="1--그림으로-보는-typescript와-javascript의-관계">1 . 그림으로 보는 TypeScript와 JavaScript의 관계</h2>

<p><img src="https://cdncontribute.geeksforgeeks.org/wp-content/uploads/Untitled-102-300x216.png" alt="TypeScript containing JavaScript" title="자바스크립트를 포함하고 있는 타입스크립트" /></p>

<h2 id="2-typescript는-어떻게-만들어졌을까">2. TypeScript는 어떻게 만들어졌을까?</h2>
<p>JavaScript가 개발될 때 JavaScript 개발 팀은 JavaScript를 클라이언트 측 프로그래밍 언어로 도입했습니다. <br />
시간이 지나면서 사람들이 JavaScript를 사용하면서 개발자들은 JavaScript가 서버 측 프로그래밍 언어로 사용될 수 있다는 것도 깨달았습니다. <br />
그러나 JavaScript가 성장함에 따라 JavaScript 코드는 복잡하고 무거워지게 되었고 객체 지향 프로그래밍 언어의 요구 사항조차 충족할 수 없는 수준에 이르렀습니다. 이로 인해 JavaScript가 서버 측 기술로 엔터프라이즈 수준에서 성공하지 못했습니다. <br />
이러한 격차를 메우기 위해 개발팀에서는 TypeScript를 만들었습니다.</p>

<h2 id="3-typescript의-기능">3. TypeScript의 기능</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">TypeScript</code> 코드는 일반 <code class="language-plaintext highlighter-rouge">JavaScript</code> 코드로 변환된다. <br />
<strong><code class="language-plaintext highlighter-rouge">Trans-piled process</code></strong>(기본적으로 브라우저에서 해석되지 않는 <code class="language-plaintext highlighter-rouge">TypeScript</code> 코드는 컴파일되어 <code class="language-plaintext highlighter-rouge">JavaScript</code>로 변환됨)</li>
  <li><code class="language-plaintext highlighter-rouge">JavaScript</code>로 작성된 모든 코드는 확장자를 <code class="language-plaintext highlighter-rouge">.js</code> 에서 <code class="language-plaintext highlighter-rouge">.ts</code>로 변경하여 TypeScript로 변환할 수 있다.</li>
  <li>단일 환경에만 국한되지 않고 모든 브라우저, 장치 또는 운영 체제에서 실행되도록 컴파일할 수 있다.</li>
  <li>JS 라이브러리를 지원한다(개발자는 이미 존재하는 JavaScript 코드를 사용하거나, 인기 있는 JavaScript 라이브러리를 통합하거나, 기본 JavaScript 코드에서 TS 코드를 호출할 수 있다)</li>
</ul>

<h2 id="4-typescript와-javascript의-차이점">4. TypeScript와 JavaScript의 차이점</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">TypeScript</th>
      <th style="text-align: center">JavaScript</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">언어</td>
      <td style="text-align: center">객체 지향 프로그래밍 언어</td>
      <td style="text-align: center">프로토타입 기반 언어</td>
    </tr>
    <tr>
      <td style="text-align: center">정적 입력 기능 지원</td>
      <td style="text-align: center">O</td>
      <td style="text-align: center">X</td>
    </tr>
    <tr>
      <td style="text-align: center">인터페이스</td>
      <td style="text-align: center">O</td>
      <td style="text-align: center">X</td>
    </tr>
  </tbody>
</table>

<h2 id="5-typescript의-장단점">5. TypeScript의 장단점</h2>

<h3 id="01-장점">01. 장점</h3>
<ul>
  <li>항상 개발(사전 컴파일) 시 컴파일 오류를 지적하여 런타임 오류가 발생할 가능성이 적다</li>
  <li>정적/강력한 타이핑을 지원하여 컴파일 타임에 타입의 정확성을 확인할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">.ts</code> 파일을 ES3, ES4 및 ES5로도 컴파일할 수 있다</li>
</ul>

<h3 id="02-단점">02. 단점</h3>
<ul>
  <li>코드를 컴파일하는 시간이 JavaScript보다 길다</li>
</ul>

<h2 id="6-참고-자료">6. 참고 자료</h2>
<ul>
  <li><a href="https://www.geeksforgeeks.org/difference-between-typescript-and-javascript/">Difference between TypeScript and JavaScript</a></li>
  <li><a href="https://radixweb.com/blog/typescript-vs-javascript">TypeScript vs JavaScript: The Difference You Should Know</a></li>
</ul>
:ET